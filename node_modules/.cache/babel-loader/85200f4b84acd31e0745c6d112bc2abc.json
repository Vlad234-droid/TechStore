{"ast":null,"code":"import axios from 'axios';\nimport { message } from 'antd';\nimport { DOMAIN, getHeaders } from '../../utils/constants';\nimport { setCustomerInfo, setOrders, startLoading, stopLoading } from './actionCreator';\nconst BASE_ENDPOINT = `${DOMAIN}/customers`;\nconst BASE_ENDPOINT_CUSTOMER_ORDERS = `${DOMAIN}/orders`;\nexport const createCustomer = (credentials, history) => {\n  axios.post(BASE_ENDPOINT, credentials).then(res => {\n    if (res.status === 200) {\n      history.push('/signin');\n      message.info('New account created successfully');\n    }\n  }).catch(error => {\n    const {\n      message\n    } = error.response.data;\n\n    if (message) {\n      message.error(`Error: ${message}`);\n    }\n  });\n};\nexport const changePassword = passwords => {\n  const headers = getHeaders();\n  const res = axios.put(`${BASE_ENDPOINT}/password`, passwords, {\n    headers\n  }).then(data => {\n    if (data.status === 200) {\n      if (data.data.message === 'Password successfully changed') {\n        message.success('Your password have been changed');\n      }\n\n      if (data.data.password === 'Password does not match') {\n        message.error('Old password is wrong ');\n      }\n    }\n  }).catch(error => {\n    if (error.response) {\n      const requestMessage = error.response.data.message;\n      message.error(`Error: ${requestMessage}`);\n    }\n  });\n  return res;\n};\nexport const getCustomer = () => (dispatch, getState) => {\n  const {\n    auth: {\n      isLogin\n    }\n  } = getState();\n  dispatch(startLoading());\n  const headers = getHeaders();\n  axios.get(`${BASE_ENDPOINT}/customer`, {\n    headers\n  }).then(data => {\n    if (data.status === 200) {\n      dispatch(setCustomerInfo(data.data));\n      dispatch(stopLoading());\n    }\n  }).catch(error => error.response);\n};\nexport const updateCustomer = (credentials, succesMessage) => dispatch => {\n  const headers = getHeaders();\n  axios.put(BASE_ENDPOINT, credentials, {\n    headers\n  }).then(data => {\n    if (data.status === 200) {\n      dispatch(setCustomerInfo(data.data));\n\n      if (succesMessage) {\n        message.success('Your contact information has been changed');\n      }\n    }\n  }).catch(error => error.response);\n};\nexport const getOrders = () => dispatch => {\n  const headers = getHeaders();\n  const results = axios.get(BASE_ENDPOINT_CUSTOMER_ORDERS, {\n    headers\n  }).then(data => {\n    if (data.status === 200) {\n      dispatch(setOrders(data.data));\n    }\n  }).catch(error => error.response);\n  return results;\n};\nexport default getOrders;","map":{"version":3,"sources":["/Users/vladikbaryshpolets/Desktop/Final_project_Online-store/src/store/customer/middleware.js"],"names":["axios","message","DOMAIN","getHeaders","setCustomerInfo","setOrders","startLoading","stopLoading","BASE_ENDPOINT","BASE_ENDPOINT_CUSTOMER_ORDERS","createCustomer","credentials","history","post","then","res","status","push","info","catch","error","response","data","changePassword","passwords","headers","put","success","password","requestMessage","getCustomer","dispatch","getState","auth","isLogin","get","updateCustomer","succesMessage","getOrders","results"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { message } from 'antd';\nimport { DOMAIN, getHeaders } from '../../utils/constants';\nimport {\n  setCustomerInfo, setOrders, startLoading, stopLoading\n} from './actionCreator';\n\nconst BASE_ENDPOINT = `${DOMAIN}/customers`;\nconst BASE_ENDPOINT_CUSTOMER_ORDERS = `${DOMAIN}/orders`;\n\nexport const createCustomer = (credentials, history) => {\n  axios.post(BASE_ENDPOINT, credentials)\n    .then((res) => {\n      if (res.status === 200) {\n        history.push('/signin')\n        message.info('New account created successfully')\n      }\n    })\n    .catch((error) => {\n      const { message } = error.response.data\n      if (message) {\n        message.error(`Error: ${message}`)\n      }\n    })\n}\n\nexport const changePassword = (passwords) => {\n  const headers = getHeaders();\n  const res = axios.put(`${BASE_ENDPOINT}/password`, passwords, {headers})\n    .then((data) => {\n      if (data.status === 200) {\n        if (data.data.message === 'Password successfully changed') {\n          message.success('Your password have been changed')\n        }\n        if (data.data.password === 'Password does not match') {\n          message.error('Old password is wrong ')\n        }\n      }\n    })\n    .catch((error) => {\n      if (error.response) {\n        const requestMessage = error.response.data.message\n        message.error(`Error: ${requestMessage}`)\n      }\n    })\n  return res\n}\n  \nexport const getCustomer = () => (dispatch, getState) => {\n  const { auth: { isLogin }} = getState()\n  dispatch(startLoading())\n  const headers = getHeaders()\n  axios.get(`${BASE_ENDPOINT}/customer`, { headers })\n    .then((data) => {\n      if (data.status === 200) {\n        dispatch(setCustomerInfo(data.data))\n        dispatch(stopLoading())\n      }\n    })\n    .catch((error) => error.response)\n}\n\nexport const updateCustomer = (credentials, succesMessage) => (dispatch) => {\n  const headers = getHeaders();\n  axios.put(BASE_ENDPOINT, credentials, {headers})\n    .then((data) => {\n      if (data.status === 200) {\n        dispatch(setCustomerInfo(data.data))\n        if (succesMessage) {\n          message.success('Your contact information has been changed')\n        }\n      }\n    })\n    .catch((error) => error.response)\n}\n\nexport const getOrders = () => (dispatch) => {\n  const headers = getHeaders()\n  const results = axios.get(BASE_ENDPOINT_CUSTOMER_ORDERS, {headers})\n    .then((data) => {\n      if (data.status === 200) {\n        dispatch(setOrders(data.data))\n      }\n    })\n    .catch((error) => error.response)\n  return results\n}\nexport default getOrders;"]},"metadata":{},"sourceType":"module"}