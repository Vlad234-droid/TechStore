{"ast":null,"code":"var _jsxFileName = \"/Users/vladikbaryshpolets/Desktop/Final_project_Online-store/src/components/DashBoard/FormPhoneChange/PhoneChange.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { Form, Input, Button } from 'antd';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { updateCustomer } from '../../../store/customer/middleware';\nimport { setHideModal } from '../../../store/dashBoardModal/middleware';\nimport { selectModalState } from '../../../store/dashBoardModal/reducer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst mapStateToProps = state => ({\n  show: selectModalState(state)\n});\n\nconst PhoneChange = connect(mapStateToProps, {\n  setHideModal,\n  updateCustomer\n})(_s(({\n  setHideModal,\n  show,\n  updateCustomer\n}) => {\n  _s();\n\n  const [form] = Form.useForm();\n\n  const onFinish = values => {\n    const validPhone = {\n      telephone: `+${values.telephone}`\n    };\n    updateCustomer(validPhone, 'Your contact information has been changed');\n    setHideModal();\n    form.resetFields();\n  };\n\n  useEffect(() => {\n    if (!show) {\n      form.resetFields();\n    }\n  }, [form, show]);\n  return /*#__PURE__*/_jsxDEV(Form, {\n    name: \"nest\",\n    form: form,\n    onFinish: onFinish,\n    \"datatest-id\": \"ModalFormInfo\",\n    children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n      name: \"telephone\",\n      label: \"New Phone\",\n      rules: [{\n        required: true,\n        type: 'string',\n        pattern: validTelephone,\n        message: 'Enter correct Phone'\n      }, {\n        min: 12,\n        max: 12,\n        message: 'Phone must be 12 characters'\n      }],\n      children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}, \"hm6PaQ/QYB/X6ENq1nmkdh1TV0k=\", false, function () {\n  return [Form.useForm];\n}));\nPhoneChange.propTypes = {\n  show: PropTypes.bool,\n  setHideModal: PropTypes.func,\n  formId: PropTypes.string,\n  updateCustomer: PropTypes.func\n};\nexport default PhoneChange;","map":{"version":3,"sources":["/Users/vladikbaryshpolets/Desktop/Final_project_Online-store/src/components/DashBoard/FormPhoneChange/PhoneChange.jsx"],"names":["React","useEffect","Form","Input","Button","connect","PropTypes","updateCustomer","setHideModal","selectModalState","mapStateToProps","state","show","PhoneChange","form","useForm","onFinish","values","validPhone","telephone","resetFields","required","type","pattern","validTelephone","message","min","max","propTypes","bool","func","formId","string"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SACEC,IADF,EACQC,KADR,EACeC,MADf,QAEO,MAFP;AAGA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,cAAT,QAA+B,oCAA/B;AACA,SAASC,YAAT,QAA6B,0CAA7B;AACA,SAASC,gBAAT,QAAiC,uCAAjC;;;AAEA,MAAMC,eAAe,GAAIC,KAAD,KAAY;AAClCC,EAAAA,IAAI,EAAEH,gBAAgB,CAACE,KAAD;AADY,CAAZ,CAAxB;;AAIA,MAAME,WAAW,GAAGR,OAAO,CAACK,eAAD,EAAkB;AAAEF,EAAAA,YAAF;AAAgBD,EAAAA;AAAhB,CAAlB,CAAP,IAA2D,CAAC;AAC9EC,EAAAA,YAD8E;AAChEI,EAAAA,IADgE;AAC1DL,EAAAA;AAD0D,CAAD,KAEzE;AAAA;;AACJ,QAAM,CAACO,IAAD,IAASZ,IAAI,CAACa,OAAL,EAAf;;AAEA,QAAMC,QAAQ,GAAIC,MAAD,IAAY;AAC3B,UAAMC,UAAU,GAAG;AACjBC,MAAAA,SAAS,EAAG,IAAGF,MAAM,CAACE,SAAU;AADf,KAAnB;AAGAZ,IAAAA,cAAc,CAACW,UAAD,EAAa,2CAAb,CAAd;AACAV,IAAAA,YAAY;AACZM,IAAAA,IAAI,CAACM,WAAL;AACD,GAPD;;AAQAnB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACW,IAAL,EAAW;AACTE,MAAAA,IAAI,CAACM,WAAL;AACD;AACF,GAJQ,EAIN,CAACN,IAAD,EAAOF,IAAP,CAJM,CAAT;AAKA,sBACE,QAAC,IAAD;AAAM,IAAA,IAAI,EAAC,MAAX;AAAkB,IAAA,IAAI,EAAEE,IAAxB;AAA8B,IAAA,QAAQ,EAAEE,QAAxC;AAAkD,mBAAY,eAA9D;AAAA,4BACE,QAAC,IAAD,CAAM,IAAN;AACE,MAAA,IAAI,EAAC,WADP;AAEE,MAAA,KAAK,EAAC,WAFR;AAGE,MAAA,KAAK,EAAE,CACL;AACEK,QAAAA,QAAQ,EAAE,IADZ;AAEEC,QAAAA,IAAI,EAAE,QAFR;AAGEC,QAAAA,OAAO,EAAEC,cAHX;AAIEC,QAAAA,OAAO,EAAE;AAJX,OADK,EAOL;AACEC,QAAAA,GAAG,EAAE,EADP;AAEEC,QAAAA,GAAG,EAAE,EAFP;AAGEF,QAAAA,OAAO,EAAE;AAHX,OAPK,CAHT;AAAA,6BAiBE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAjBF;AAAA;AAAA;AAAA;AAAA,YADF,eAoBE,QAAC,IAAD,CAAM,IAAN;AAAA,6BACE,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,SAAb;AAAuB,QAAA,QAAQ,EAAC,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YApBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA4BD,CA9CmB;AAAA,UAGHvB,IAAI,CAACa,OAHF;AAAA,GAApB;AAgDAF,WAAW,CAACe,SAAZ,GAAwB;AACtBhB,EAAAA,IAAI,EAAEN,SAAS,CAACuB,IADM;AAEtBrB,EAAAA,YAAY,EAAEF,SAAS,CAACwB,IAFF;AAGtBC,EAAAA,MAAM,EAAEzB,SAAS,CAAC0B,MAHI;AAItBzB,EAAAA,cAAc,EAAED,SAAS,CAACwB;AAJJ,CAAxB;AAOA,eAAejB,WAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport {\n  Form, Input, Button\n} from 'antd';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { updateCustomer } from '../../../store/customer/middleware';\nimport { setHideModal } from '../../../store/dashBoardModal/middleware';\nimport { selectModalState } from '../../../store/dashBoardModal/reducer'\n\nconst mapStateToProps = (state) => ({\n  show: selectModalState(state),\n})\n\nconst PhoneChange = connect(mapStateToProps, { setHideModal, updateCustomer })(({\n  setHideModal, show, updateCustomer\n}) => {\n  const [form] = Form.useForm();\n\n  const onFinish = (values) => {\n    const validPhone = {\n      telephone: `+${values.telephone}`\n    }\n    updateCustomer(validPhone, 'Your contact information has been changed');\n    setHideModal();\n    form.resetFields()\n  }\n  useEffect(() => {\n    if (!show) {\n      form.resetFields()\n    }\n  }, [form, show])\n  return (\n    <Form name=\"nest\" form={form} onFinish={onFinish} datatest-id=\"ModalFormInfo\">\n      <Form.Item\n        name=\"telephone\"\n        label=\"New Phone\"\n        rules={[\n          {\n            required: true,\n            type: 'string',\n            pattern: validTelephone,\n            message: 'Enter correct Phone'\n          },\n          {\n            min: 12,\n            max: 12,\n            message: 'Phone must be 12 characters',\n          },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Submit\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n})\n\nPhoneChange.propTypes = {\n  show: PropTypes.bool,\n  setHideModal: PropTypes.func,\n  formId: PropTypes.string,\n  updateCustomer: PropTypes.func\n}\n\nexport default PhoneChange;\n"]},"metadata":{},"sourceType":"module"}