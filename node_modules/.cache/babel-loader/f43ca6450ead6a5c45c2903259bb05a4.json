{"ast":null,"code":"var _jsxFileName = \"/Users/vladikbaryshpolets/Desktop/Final_project_Online-store/src/components/DashBoard/FormInfoChange/FormInfoChange.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { Form, Input, Button } from 'antd';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { updateCustomer } from '../../../store/customer/middleware';\nimport { setHideModal } from '../../../store/dashBoardModal/middleware';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst mapStateToProps = state => ({\n  show: state.dashBoardModal.show\n});\n\nconst FormInfoChange = connect(mapStateToProps, {\n  setHideModal\n})(_s(({\n  setInfo,\n  setHideModal,\n  show\n}) => {\n  _s();\n\n  const [form] = Form.useForm();\n\n  const onFinish = values => {\n    updateCustomer(values);\n    setHideModal();\n    setInfo(prev => ({ ...prev,\n      ...values\n    }));\n    form.resetFields();\n  };\n\n  useEffect(() => {\n    if (!show) {\n      form.resetFields();\n    }\n  }, [form, show]);\n  return /*#__PURE__*/_jsxDEV(Form, {\n    name: \"nest\",\n    form: form,\n    onFinish: onFinish,\n    \"datatest-id\": \"ModalFormInfo\",\n    children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n      name: \"firstName\",\n      label: \"First name\",\n      rules: [{\n        required: true,\n        type: 'string',\n        pattern: /^[a-z0-9]+$/i,\n        message: 'Enter correct First name'\n      }],\n      children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      style: {\n        paddingBottom: '0px'\n      },\n      name: \"lastName\",\n      label: \"Last name\",\n      rules: [{\n        required: true,\n        type: 'string',\n        pattern: /^[a-z0-9]+$/i,\n        message: 'Enter correct Last name'\n      }],\n      children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}, \"hm6PaQ/QYB/X6ENq1nmkdh1TV0k=\", false, function () {\n  return [Form.useForm];\n}));\nFormInfoChange.propTypes = {\n  setInfo: PropTypes.func.isRequired,\n  setHideModal: PropTypes.func.isRequired\n};\nexport default FormInfoChange;","map":{"version":3,"sources":["/Users/vladikbaryshpolets/Desktop/Final_project_Online-store/src/components/DashBoard/FormInfoChange/FormInfoChange.jsx"],"names":["React","useEffect","Form","Input","Button","connect","PropTypes","updateCustomer","setHideModal","mapStateToProps","state","show","dashBoardModal","FormInfoChange","setInfo","form","useForm","onFinish","values","prev","resetFields","required","type","pattern","message","paddingBottom","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport {\n  Form, Input, Button\n} from 'antd';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { updateCustomer } from '../../../store/customer/middleware';\nimport { setHideModal } from '../../../store/dashBoardModal/middleware';\n\nconst mapStateToProps = (state) => ({\n  show: state.dashBoardModal.show\n})\n\nconst FormInfoChange = connect(mapStateToProps, { setHideModal })(({\n  setInfo, setHideModal, show\n}) => {\n  const [form] = Form.useForm();\n\n  const onFinish = (values) => {\n    updateCustomer(values);\n    setHideModal();\n    setInfo((prev) => ({\n      ...prev,\n      ...values\n    }))\n    form.resetFields()\n  }\n  useEffect(() => {\n    if (!show) {\n      form.resetFields()\n    }\n  }, [form, show])\n  return (\n    <Form name=\"nest\" form={form} onFinish={onFinish} datatest-id=\"ModalFormInfo\">\n      <Form.Item\n        name=\"firstName\"\n        label=\"First name\"\n        rules={[{\n          required: true,\n          type: 'string',\n          pattern: /^[a-z0-9]+$/i,\n          message: 'Enter correct First name'\n        }]}\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item\n        style={{paddingBottom: '0px'}}\n        name=\"lastName\"\n        label=\"Last name\"\n        rules={[{\n          required: true,\n          type: 'string',\n          pattern: /^[a-z0-9]+$/i,\n          message: 'Enter correct Last name'\n        }]}\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Submit\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n})\nFormInfoChange.propTypes = {\n  setInfo: PropTypes.func.isRequired,\n  setHideModal: PropTypes.func.isRequired,\n}\nexport default FormInfoChange;\n"]},"metadata":{},"sourceType":"module"}