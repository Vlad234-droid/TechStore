{"ast":null,"code":"var _jsxFileName = \"/Users/vladikbaryshpolets/Desktop/Final_project_Online-store/src/components/DashBoard/DashBoard.jsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react/forbid-prop-types */\n\n/* eslint-disable react/require-default-props */\n\n/* eslint-disable no-unused-vars */\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Container } from '../common/Container';\nimport Subscribe from './Subscribed/Subscribe';\nimport { AccountInfo, MyDash, WrapperBlocks, RowBlocks } from './StyledDashBoard';\nimport PasswordInfoChange from './PasswordInfoChange/PasswordInfoChange';\nimport StyledSpinner from '../StyledSpinner/StyledSpinner';\nimport Orders from './Orders/Orders';\nimport { selectCustomerInfo, selectIsLoading } from '../../store/customer/reducer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst mapStateToProps = state => ({\n  customerInfo: selectCustomerInfo(state),\n  isLoading: selectIsLoading(state)\n});\n\nconst DashBoard = ({\n  customerInfo,\n  isLoading\n}) => {\n  _s();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    console.log(customerInfo);\n  }, [customerInfo]);\n  if (isLoading) return /*#__PURE__*/_jsxDEV(StyledSpinner, {\n    size: \"large\",\n    tip: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(MyDash, {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"My Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AccountInfo, {\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Account Information\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WrapperBlocks, {\n      children: [/*#__PURE__*/_jsxDEV(RowBlocks, {\n        children: /*#__PURE__*/_jsxDEV(PasswordInfoChange, {\n          info: customerInfo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowBlocks, {\n        children: /*#__PURE__*/_jsxDEV(Subscribe, {\n          email: customerInfo.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RowBlocks, {\n        children: /*#__PURE__*/_jsxDEV(Orders, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DashBoard, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = DashBoard;\nDashBoard.propTypes = {\n  customerInfo: PropTypes.array,\n  isLoading: PropTypes.func\n};\nconst DashBoardMock = connect(mapStateToProps, null)(DashBoard);\nexport default DashBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"DashBoard\");","map":{"version":3,"sources":["/Users/vladikbaryshpolets/Desktop/Final_project_Online-store/src/components/DashBoard/DashBoard.jsx"],"names":["React","useEffect","connect","PropTypes","Container","Subscribe","AccountInfo","MyDash","WrapperBlocks","RowBlocks","PasswordInfoChange","StyledSpinner","Orders","selectCustomerInfo","selectIsLoading","mapStateToProps","state","customerInfo","isLoading","DashBoard","window","scrollTo","console","log","email","propTypes","array","func","DashBoardMock"],"mappings":";;;AAAA;;AACA;;AACA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,SACEC,WADF,EACeC,MADf,EACuBC,aADvB,EACsCC,SADtC,QAEO,mBAFP;AAGA,OAAOC,kBAAP,MAA+B,yCAA/B;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SAASC,kBAAT,EAA6BC,eAA7B,QAAoD,8BAApD;;;AAEA,MAAMC,eAAe,GAAIC,KAAD,KAAY;AAClCC,EAAAA,YAAY,EAAEJ,kBAAkB,CAACG,KAAD,CADE;AAElCE,EAAAA,SAAS,EAAEJ,eAAe,CAACE,KAAD;AAFQ,CAAZ,CAAxB;;AAKA,MAAMG,SAAS,GAAG,CAAC;AACjBF,EAAAA,YADiB;AAEjBC,EAAAA;AAFiB,CAAD,KAGZ;AAAA;;AACJjB,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,MAAM,CAACC,QAAP,CAAgB,CAAhB,EAAmB,CAAnB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYN,YAAZ;AACD,GAHQ,EAGN,CAACA,YAAD,CAHM,CAAT;AAKA,MAAIC,SAAJ,EAAe,oBAAO,QAAC,aAAD;AAAe,IAAA,IAAI,EAAC,OAApB;AAA4B,IAAA,GAAG,EAAC;AAAhC;AAAA;AAAA;AAAA;AAAA,UAAP;AACf,sBACE,QAAC,SAAD;AAAA,4BACE,QAAC,MAAD;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE,QAAC,WAAD;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAJF,eAOE,QAAC,aAAD;AAAA,8BACE,QAAC,SAAD;AAAA,+BACE,QAAC,kBAAD;AAAoB,UAAA,IAAI,EAAED;AAA1B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,SAAD;AAAA,+BACE,QAAC,SAAD;AACE,UAAA,KAAK,EAAEA,YAAY,CAACO;AADtB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAJF,eASE,QAAC,SAAD;AAAA,+BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD,CAjCD;;GAAML,S;;KAAAA,S;AAmCNA,SAAS,CAACM,SAAV,GAAsB;AACpBR,EAAAA,YAAY,EAAEd,SAAS,CAACuB,KADJ;AAEpBR,EAAAA,SAAS,EAAEf,SAAS,CAACwB;AAFD,CAAtB;AAKA,MAAMC,aAAa,GAAG1B,OAAO,CAC3Ba,eAD2B,EACV,IADU,CAAP,CAEpBI,SAFoB,CAAtB;AAIA,eAAeA,SAAf","sourcesContent":["/* eslint-disable react/forbid-prop-types */\n/* eslint-disable react/require-default-props */\n/* eslint-disable no-unused-vars */\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Container } from '../common/Container'\nimport Subscribe from './Subscribed/Subscribe';\nimport {\n  AccountInfo, MyDash, WrapperBlocks, RowBlocks,\n} from './StyledDashBoard';\nimport PasswordInfoChange from './PasswordInfoChange/PasswordInfoChange';\nimport StyledSpinner from '../StyledSpinner/StyledSpinner'\nimport Orders from './Orders/Orders';\nimport { selectCustomerInfo, selectIsLoading } from '../../store/customer/reducer'\n\nconst mapStateToProps = (state) => ({\n  customerInfo: selectCustomerInfo(state),\n  isLoading: selectIsLoading(state)\n})\n\nconst DashBoard = ({\n  customerInfo,\n  isLoading\n}) => {\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    console.log(customerInfo)\n  }, [customerInfo])\n\n  if (isLoading) return <StyledSpinner size=\"large\" tip=\"Loading...\" />\n  return (\n    <Container>\n      <MyDash>\n        <p>My Dashboard</p>\n      </MyDash>\n      <AccountInfo>\n        <h3>Account Information</h3>\n      </AccountInfo>\n      <WrapperBlocks>\n        <RowBlocks>\n          <PasswordInfoChange info={customerInfo} />\n        </RowBlocks>\n        <RowBlocks>\n          <Subscribe\n            email={customerInfo.email}\n          />\n        </RowBlocks>\n        <RowBlocks>\n          <Orders />\n        </RowBlocks>\n      </WrapperBlocks>\n    </Container>\n  );\n}\n\nDashBoard.propTypes = {\n  customerInfo: PropTypes.array,\n  isLoading: PropTypes.func\n}\n\nconst DashBoardMock = connect(\n  mapStateToProps, null\n)(DashBoard)\n\nexport default DashBoard;\n"]},"metadata":{},"sourceType":"module"}