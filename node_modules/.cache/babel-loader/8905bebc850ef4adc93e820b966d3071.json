{"ast":null,"code":"var _jsxFileName = \"/Users/vladikbaryshpolets/Desktop/Final_project_Online-store/src/components/Checkout/FormCheckout/FormCheckout.jsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable no-underscore-dangle */\n\n/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useMemo, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Input, Radio, Row, Select } from 'antd';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom/';\nimport { selectBranches, selectCities, selectCustomer, selectProducts, selectShippingCost } from '../../../store/cart/reducer';\nimport { StyledRadio, StyledShippingTitle } from '../StyledCheckout';\nimport StyledButton from '../../common/Buttons/StyledButton';\nimport { getCity, getShippingCost, PlaceOrder } from '../../../store/cart/middleware';\nimport { selectIsLogin } from '../../../store/auth/reducer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst mapStateToProps = state => ({\n  cities: selectCities(state),\n  branches: selectBranches(state),\n  customer: selectCustomer(state),\n  shippingCost: selectShippingCost(state),\n  products: selectProducts(state),\n  isLogin: selectIsLogin(state)\n});\n\nconst FormCheckout = connect(mapStateToProps, {\n  getCity,\n  getShippingCost,\n  PlaceOrder\n})(_s(({\n  cities,\n  branches,\n  customer,\n  getCity,\n  getShippingCost,\n  shippingCost,\n  PlaceOrder,\n  isLogin,\n  products\n}) => {\n  _s();\n\n  const recipientCityRef = useRef();\n  const countryRef = useRef();\n  const branchName = useRef();\n  const [valuePaymentInfo, setValuePaymentInfo] = useState('Cash');\n\n  const onChange = e => {\n    setValuePaymentInfo(e.target.value);\n  };\n\n  const history = useHistory();\n\n  const onFinish = values => {\n    PlaceOrder(products, isLogin, values, customer, shippingCost, valuePaymentInfo);\n    history.push('/order');\n  };\n\n  const formLayout = {\n    labelCol: {\n      xs: {\n        span: 24\n      },\n      sm: {\n        span: 6\n      },\n      md: {\n        span: 8\n      },\n      lg: {\n        span: 7\n      }\n    },\n    wrapperCol: {\n      xs: {\n        span: 24\n      },\n      sm: {\n        span: 16\n      },\n      md: {\n        span: 16\n      },\n      lg: {\n        span: 12\n      }\n    }\n  };\n  const {\n    Option\n  } = Select;\n  const fields = useMemo(() => [{\n    name: 'email',\n    value: customer.email || null\n  }, {\n    name: 'firstName',\n    value: customer.firstName || null\n  }, {\n    name: 'lastName',\n    value: customer.lastName || null\n  }, {\n    name: 'phoneNumber',\n    value: customer.telephone || null\n  }, {\n    name: 'country',\n    value: 'Ukraine'\n  }], [customer]);\n  return /*#__PURE__*/_jsxDEV(Form, { ...formLayout,\n    name: \"checkout-form\",\n    fields: fields,\n    initialValues: {\n      remember: true\n    },\n    onFinish: onFinish,\n    children: [/*#__PURE__*/_jsxDEV(StyledShippingTitle, {\n      children: \"Customer Details:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      label: \"Email\",\n      name: \"email\",\n      rules: [{\n        required: true,\n        message: 'Please input your active email.'\n      }, {\n        type: 'email',\n        message: 'Entered data is not an email.'\n      }],\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        placeholder: \"test@testmail.com\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      label: \"First name\",\n      name: \"firstName\",\n      rules: [{\n        required: true,\n        message: 'Please input your name.'\n      }, {\n        type: 'string',\n        min: 2,\n        max: 25\n      }, {\n        pattern: /^[a-zа-яіїё]+$/i,\n        message: 'First name cannot contain characters or numbers'\n      }],\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        placeholder: \"First name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      label: \"Last name\",\n      name: \"lastName\",\n      rules: [{\n        required: true,\n        message: 'Please input your Last name.'\n      }, {\n        type: 'string',\n        min: 2,\n        max: 25\n      }, {\n        pattern: /^[a-zа-яіїё]+$/i,\n        message: 'Last name cannot contain characters or numbers'\n      }],\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        placeholder: \"Last name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      label: \"Phone number\",\n      name: \"phoneNumber\",\n      rules: [{\n        required: true,\n        message: 'Please input your phone number 380 XX XXX XXXX',\n        min: 12,\n        max: 12\n      }, {\n        pattern: /^[0-9]+$/,\n        message: 'Phone number cannot contain letter'\n      }],\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        placeholder: \"Mobile Number 380 XX XXX XXXX\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StyledShippingTitle, {\n      children: \"Payment Details:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Radio.Group, {\n      name: \"paymentInfo\",\n      onChange: onChange,\n      value: valuePaymentInfo,\n      style: {\n        marginBottom: '20px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(StyledRadio, {\n          value: \"Cash\",\n          children: \"Cash\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(StyledRadio, {\n          value: \"Card\",\n          children: \"Card\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StyledShippingTitle, {\n      children: \"Shipping Details:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      label: \"Country\",\n      name: \"country\",\n      rules: [{\n        required: true,\n        message: 'Country is required'\n      }],\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        disabled: true,\n        ref: countryRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      label: \"City\",\n      name: \"recipientCity\",\n      rules: [{\n        required: true,\n        message: 'Recipient city is required'\n      }],\n      children: /*#__PURE__*/_jsxDEV(Select, {\n        placeholder: \"Select the city of recipient\",\n        onChange: getCity,\n        ref: recipientCityRef,\n        children: cities.map(item => /*#__PURE__*/_jsxDEV(Option, {\n          value: item.Ref,\n          children: item.CityName\n        }, item.Ref, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      label: \"\\u2116 branch\",\n      name: \"recipientBranch\",\n      rules: [{\n        required: true,\n        message: 'Branch is required'\n      }],\n      children: /*#__PURE__*/_jsxDEV(Select, {\n        placeholder: \"Select the branch of Nova Poshta of the recipient\",\n        onChange: () => getShippingCost(recipientCityRef),\n        ref: branchName,\n        children: branches.map(item => /*#__PURE__*/_jsxDEV(Option, {\n          value: item.branchName,\n          children: item.branchName\n        }, item.branchRef, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StyledButton, {\n      shape: \"round\",\n      htmlType: \"submit\",\n      children: \"Place Order\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}, \"IXevzV1OZ0SoTx0/wcdfnTvGfL0=\", false, function () {\n  return [useHistory];\n}));\nexport default FormCheckout;\nFormCheckout.propTypes = {\n  cities: PropTypes.string,\n  branches: PropTypes.string,\n  shippingCost: PropTypes.number,\n  getCity: PropTypes.func,\n  getShippingCost: PropTypes.func,\n  PlaceOrder: PropTypes.func,\n  customer: PropTypes.shape({\n    telephone: PropTypes.string,\n    lastName: PropTypes.string,\n    firstName: PropTypes.string,\n    email: PropTypes.string\n  })\n};","map":{"version":3,"sources":["/Users/vladikbaryshpolets/Desktop/Final_project_Online-store/src/components/Checkout/FormCheckout/FormCheckout.jsx"],"names":["React","useMemo","useRef","useState","PropTypes","Form","Input","Radio","Row","Select","connect","useHistory","selectBranches","selectCities","selectCustomer","selectProducts","selectShippingCost","StyledRadio","StyledShippingTitle","StyledButton","getCity","getShippingCost","PlaceOrder","selectIsLogin","mapStateToProps","state","cities","branches","customer","shippingCost","products","isLogin","FormCheckout","recipientCityRef","countryRef","branchName","valuePaymentInfo","setValuePaymentInfo","onChange","e","target","value","history","onFinish","values","push","formLayout","labelCol","xs","span","sm","md","lg","wrapperCol","Option","fields","name","email","firstName","lastName","telephone","remember","required","message","type","min","max","pattern","marginBottom","map","item","Ref","CityName","branchRef","propTypes","string","number","func","shape"],"mappings":"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","sourcesContent":["/* eslint-disable no-underscore-dangle */\n/* eslint-disable react/jsx-props-no-spreading */\nimport React, {useMemo, useRef, useState} from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Form, Input, Radio, Row, Select\n} from 'antd';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom/';\nimport {\n  selectBranches,\n  selectCities,\n  selectCustomer,\n  selectProducts,\n  selectShippingCost\n} from '../../../store/cart/reducer';\nimport {StyledRadio, StyledShippingTitle} from '../StyledCheckout';\nimport StyledButton from '../../common/Buttons/StyledButton';\nimport {\n  getCity, getShippingCost, PlaceOrder\n} from '../../../store/cart/middleware';\nimport { selectIsLogin } from '../../../store/auth/reducer';\n\nconst mapStateToProps = (state) => ({\n  cities: selectCities(state),\n  branches: selectBranches(state),\n  customer: selectCustomer(state),\n  shippingCost: selectShippingCost(state),\n  products: selectProducts(state),\n  isLogin: selectIsLogin(state)\n})\n\nconst FormCheckout = connect(mapStateToProps, {getCity, getShippingCost, PlaceOrder})(({\n  cities, branches, customer, getCity, getShippingCost, shippingCost, PlaceOrder, isLogin, products\n}) => {\n  const recipientCityRef = useRef();\n  const countryRef = useRef();\n  const branchName = useRef();\n\n  const [valuePaymentInfo, setValuePaymentInfo] = useState('Cash');\n\n  const onChange = (e) => {\n    setValuePaymentInfo(e.target.value);\n  };\n\n  const history = useHistory()\n\n  const onFinish = (values) => {\n    PlaceOrder(products, isLogin, values, customer, shippingCost, valuePaymentInfo)\n    history.push('/order')\n  };\n\n  const formLayout = {\n    labelCol: {\n      xs: {\n        span: 24,\n      },\n      sm: {\n        span: 6,\n      },\n      md: {\n        span: 8,\n      },\n      lg: {\n        span: 7,\n      },\n    },\n    wrapperCol: {\n      xs: {\n        span: 24,\n      },\n      sm: {\n        span: 16,\n      },\n      md: {\n        span: 16,\n      },\n      lg: {\n        span: 12,\n      },\n    },\n  };\n        \n  const { Option } = Select;\n\n  const fields = useMemo(() => ([{\n    name: 'email',\n    value: customer.email || null\n  },\n  {\n    name: 'firstName',\n    value: customer.firstName || null\n  },\n  {\n    name: 'lastName',\n    value: customer.lastName || null\n  },\n  {\n    name: 'phoneNumber',\n    value: customer.telephone || null\n  },\n  {\n    name: 'country',\n    value: 'Ukraine'\n  },\n  ]), [customer])\n\n  return (\n    <Form\n      {...formLayout}\n      name=\"checkout-form\"\n      fields={fields}\n      initialValues={{\n        remember: true,\n      }}\n      onFinish={onFinish}\n    >\n      <StyledShippingTitle>\n        Customer Details:\n      </StyledShippingTitle>\n\n      <Form.Item\n        label=\"Email\"\n        name=\"email\"\n        rules={[\n          {\n            required: true,\n            message: 'Please input your active email.',\n          },\n          {\n            type: 'email',\n            message: 'Entered data is not an email.',\n          },\n        ]}\n      >\n        <Input placeholder=\"test@testmail.com\" />\n      </Form.Item>\n      \n      <Form.Item\n        label=\"First name\"\n        name=\"firstName\"\n        rules={[\n          {\n            required: true,\n            message: 'Please input your name.',\n          },\n          {\n            type: 'string',\n            min: 2,\n            max: 25,\n          },\n          {\n            pattern: /^[a-zа-яіїё]+$/i,\n            message: 'First name cannot contain characters or numbers'\n          }\n        ]}\n      >\n        <Input placeholder=\"First name\" />\n      </Form.Item>\n\n      <Form.Item\n        label=\"Last name\"\n        name=\"lastName\"\n        rules={[\n          {\n            required: true,\n            message: 'Please input your Last name.',\n          },\n          {\n            type: 'string',\n            min: 2,\n            max: 25,\n          },\n          {\n            pattern: /^[a-zа-яіїё]+$/i,\n            message: 'Last name cannot contain characters or numbers'\n          }\n        ]}\n      >\n        <Input placeholder=\"Last name\" />\n      </Form.Item>\n\n      <Form.Item\n        label=\"Phone number\"\n        name=\"phoneNumber\"\n        rules={[\n          {\n            required: true,\n            message: 'Please input your phone number 380 XX XXX XXXX',\n            min: 12,\n            max: 12,\n          },\n          {\n            pattern: /^[0-9]+$/,\n            message: 'Phone number cannot contain letter'\n          }\n        ]}\n      >\n        <Input placeholder=\"Mobile Number 380 XX XXX XXXX\" />\n      </Form.Item>\n\n      <StyledShippingTitle>\n        Payment Details:\n      </StyledShippingTitle>\n\n      <Radio.Group\n        name=\"paymentInfo\"\n        onChange={onChange}\n        value={valuePaymentInfo}\n        style={{marginBottom: '20px'}}\n      >\n        <Row>\n          <StyledRadio value=\"Cash\">\n            Cash\n          </StyledRadio>\n          <StyledRadio value=\"Card\">\n            Card\n          </StyledRadio>\n        </Row>\n      </Radio.Group>\n      \n      <StyledShippingTitle>\n        Shipping Details:\n      </StyledShippingTitle>\n\n      <Form.Item\n        label=\"Country\"\n        name=\"country\"\n        rules={[{ required: true, message: 'Country is required' }]}\n      >\n        <Input disabled ref={countryRef} />\n      </Form.Item>\n\n      <Form.Item\n        label=\"City\"\n        name=\"recipientCity\"\n        rules={[{ required: true, message: 'Recipient city is required' }]}\n      >\n        <Select\n          placeholder=\"Select the city of recipient\"\n          onChange={getCity}\n          ref={recipientCityRef}\n        >\n          {cities.map((item) => (\n            <Option value={item.Ref} key={item.Ref}>\n              {item.CityName}\n            </Option>\n          ))}\n        </Select>\n      </Form.Item>\n\n      <Form.Item\n        label=\"№ branch\"\n        name=\"recipientBranch\"\n        rules={[{ required: true, message: 'Branch is required' }]}\n      >\n        <Select\n          placeholder=\"Select the branch of Nova Poshta of the recipient\"\n          onChange={() => getShippingCost(recipientCityRef)}\n          ref={branchName}\n        >\n          {branches.map((item) => (\n            <Option value={item.branchName} key={item.branchRef}>\n              {item.branchName}\n            </Option>\n          ))}\n        </Select>\n      </Form.Item>\n      \n      <StyledButton shape=\"round\" htmlType=\"submit\">\n        Place Order\n      </StyledButton>\n\n    </Form>\n  )\n})\n\nexport default FormCheckout;\n\nFormCheckout.propTypes = {\n  cities: PropTypes.string,\n  branches: PropTypes.string,\n  shippingCost: PropTypes.number,\n  getCity: PropTypes.func,\n  getShippingCost: PropTypes.func,\n  PlaceOrder: PropTypes.func,\n  customer: PropTypes.shape({\n    telephone: PropTypes.string,\n    lastName: PropTypes.string,\n    firstName: PropTypes.string,\n    email: PropTypes.string,\n  }),\n}"]},"metadata":{},"sourceType":"module"}