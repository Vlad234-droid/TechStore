{"ast":null,"code":"var _jsxFileName = \"/Users/vladikbaryshpolets/Desktop/Final_project_Online-store/src/components/Checkout/FormCheckout/FormCheckout.jsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useMemo, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Input, Radio, Select } from 'antd';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom/';\nimport { selectBranches, selectCities, selectCustomer, selectProducts, selectShippingCost } from '../../../store/cart/reducer';\nimport { StyledRadio, StyledShippingTitle } from '../StyledCheckout';\nimport StyledButton from '../../common/Buttons/StyledButton';\nimport { getBranches, getShippingCost, placeOrder } from '../../../store/cart/middleware';\nimport { validName, validTelephone } from '../../../utils/constants';\nimport { layoutFormCheckout } from './utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const FormCheckoutComponent = props => {\n  _s();\n\n  const {\n    cities,\n    branches,\n    customer,\n    getBranches,\n    shippingCost,\n    placeOrder,\n    products,\n    getShippingCost\n  } = props;\n  const {\n    Option\n  } = Select;\n  const history = useHistory();\n  const formLayout = layoutFormCheckout;\n  const fields = useMemo(() => [{\n    name: 'email',\n    value: customer.email || null\n  }, {\n    name: 'firstName',\n    value: customer.firstName || null\n  }, {\n    name: 'lastName',\n    value: customer.lastName || null\n  }, {\n    name: 'phoneNumber',\n    value: customer.telephone || '+380'\n  }, {\n    name: 'country',\n    value: 'Ukraine'\n  }], [customer]);\n  const recipientCityRef = useRef();\n  const countryRef = useRef();\n  const branchSelect = useRef();\n  const [valuePaymentInfo] = useState('Payment at the time of receipt of the goods');\n  const [form] = Form.useForm();\n\n  const handleCityChange = cityRef => {\n    form.setFieldsValue({\n      recipientBranch: null\n    });\n    getBranches(cityRef);\n  };\n\n  const onFinish = values => {\n    placeOrder(products, values, customer, shippingCost, valuePaymentInfo);\n    history.push('/order');\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, { ...formLayout,\n    name: \"checkout-form\",\n    fields: fields,\n    form: form,\n    onFinish: onFinish,\n    children: [/*#__PURE__*/_jsxDEV(StyledShippingTitle, {\n      children: \"Customer Details:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      label: \"Email\",\n      name: \"email\",\n      rules: [{\n        required: true,\n        message: 'Please input your active email.'\n      }, {\n        type: 'email',\n        message: 'Entered data is not an email.'\n      }],\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        placeholder: \"test@testmail.com\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      label: \"First name\",\n      name: \"firstName\",\n      rules: [{\n        required: true,\n        message: 'Please input your name.'\n      }, {\n        type: 'string',\n        min: 2,\n        max: 25,\n        message: 'FirstName must be between 2 and 25 letters'\n      }, {\n        pattern: validName,\n        message: 'First name cannot contain characters, space or numbers'\n      }],\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        placeholder: \"First name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      label: \"Last name\",\n      name: \"lastName\",\n      rules: [{\n        required: true,\n        message: 'Please input your Last name.'\n      }, {\n        type: 'string',\n        min: 2,\n        max: 25,\n        message: 'LastName must be between 2 and 25 letters'\n      }, {\n        pattern: validName,\n        message: 'Last name cannot contain characters, space or numbers'\n      }],\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        placeholder: \"Last name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      label: \"Phone number\",\n      name: \"phoneNumber\",\n      rules: [{\n        required: true,\n        message: 'Please input your phone number +380 XX XXX XXXX',\n        min: 13,\n        max: 13\n      }, {\n        pattern: validTelephone,\n        message: 'Phone number must start with \"+380\", allowed characters is 0-9'\n      }],\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        placeholder: \"Mobile Number +380 XX XXX XXXX\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StyledShippingTitle, {\n      children: \"Payment Details:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Radio.Group, {\n      name: \"paymentInfo\",\n      value: valuePaymentInfo,\n      style: {\n        marginBottom: '20px'\n      },\n      children: /*#__PURE__*/_jsxDEV(StyledRadio, {\n        value: \"Payment at the time of receipt of the goods\",\n        children: \"Payment at the time of receipt of the goods\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StyledShippingTitle, {\n      children: \"Shipping Details:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      label: \"Country\",\n      name: \"country\",\n      rules: [{\n        required: true,\n        message: 'Country is required'\n      }],\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        disabled: true,\n        ref: countryRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      label: \"City\",\n      name: \"recipientCity\",\n      title: \"City choice\",\n      rules: [{\n        required: true,\n        message: 'Recipient city is required'\n      }],\n      children: /*#__PURE__*/_jsxDEV(Select, {\n        placeholder: \"Select the city of recipient\",\n        onChange: handleCityChange,\n        ref: recipientCityRef,\n        children: cities.map(item => /*#__PURE__*/_jsxDEV(Option, {\n          value: item.Ref,\n          children: item.CityName\n        }, item.Ref, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      label: \"\\u2116 branch\",\n      name: \"recipientBranch\",\n      rules: [{\n        required: true,\n        message: 'Branch is required'\n      }],\n      children: /*#__PURE__*/_jsxDEV(Select, {\n        placeholder: \"Select the branch of Nova Poshta of the recipient\",\n        onChange: () => getShippingCost(recipientCityRef),\n        ref: branchSelect,\n        children: branches.map(item => /*#__PURE__*/_jsxDEV(Option, {\n          value: item.branchName,\n          children: item.branchName\n        }, item.branchRef, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StyledButton, {\n      shape: \"round\",\n      htmlType: \"submit\",\n      children: \"Place Order\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FormCheckoutComponent, \"sV+TI8sMnyt8JXM4+Edn16odGpk=\", false, function () {\n  return [useHistory, Form.useForm];\n});\n\n_c = FormCheckoutComponent;\n\nconst mapStateToProps = state => ({\n  cities: selectCities(state),\n  branches: selectBranches(state),\n  customer: selectCustomer(state),\n  shippingCost: selectShippingCost(state),\n  products: selectProducts(state)\n});\n\nconst FormCheckout = connect(mapStateToProps, {\n  getBranches,\n  getShippingCost,\n  placeOrder\n})(FormCheckoutComponent);\nFormCheckoutComponent.propTypes = {\n  cities: PropTypes.arrayOf(PropTypes.shape({\n    CityName: PropTypes.string.isRequired,\n    Ref: PropTypes.string.isRequired\n  })).isRequired,\n  branches: PropTypes.arrayOf(PropTypes.shape({\n    branchName: PropTypes.string.isRequired,\n    branchRef: PropTypes.string.isRequired\n  })).isRequired,\n  shippingCost: PropTypes.number.isRequired,\n  getBranches: PropTypes.func.isRequired,\n  getShippingCost: PropTypes.func.isRequired,\n  placeOrder: PropTypes.func.isRequired,\n  customer: PropTypes.shape({\n    telephone: PropTypes.string,\n    lastName: PropTypes.string,\n    firstName: PropTypes.string,\n    email: PropTypes.string\n  }).isRequired,\n  products: PropTypes.arrayOf(PropTypes.shape({\n    imageUrls: PropTypes.arrayOf(PropTypes.string),\n    name: PropTypes.string,\n    currentPrice: PropTypes.number,\n    _id: PropTypes.string\n  })).isRequired\n};\nexport default FormCheckout;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormCheckoutComponent\");","map":{"version":3,"sources":["/Users/vladikbaryshpolets/Desktop/Final_project_Online-store/src/components/Checkout/FormCheckout/FormCheckout.jsx"],"names":["React","useMemo","useRef","useState","PropTypes","Form","Input","Radio","Select","connect","useHistory","selectBranches","selectCities","selectCustomer","selectProducts","selectShippingCost","StyledRadio","StyledShippingTitle","StyledButton","getBranches","getShippingCost","placeOrder","validName","validTelephone","layoutFormCheckout","FormCheckoutComponent","props","cities","branches","customer","shippingCost","products","Option","history","formLayout","fields","name","value","email","firstName","lastName","telephone","recipientCityRef","countryRef","branchSelect","valuePaymentInfo","form","useForm","handleCityChange","cityRef","setFieldsValue","recipientBranch","onFinish","values","push","required","message","type","min","max","pattern","marginBottom","map","item","Ref","CityName","branchName","branchRef","mapStateToProps","state","FormCheckout","propTypes","arrayOf","shape","string","isRequired","number","func","imageUrls","currentPrice","_id"],"mappings":"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","sourcesContent":["/* eslint-disable react/jsx-props-no-spreading */\nimport React, {\n  useMemo, useRef, useState\n} from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Form, Input, Radio, Select\n} from 'antd';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom/';\nimport {\n  selectBranches,\n  selectCities,\n  selectCustomer,\n  selectProducts,\n  selectShippingCost\n} from '../../../store/cart/reducer';\nimport {StyledRadio, StyledShippingTitle} from '../StyledCheckout';\nimport StyledButton from '../../common/Buttons/StyledButton';\nimport { getBranches, getShippingCost, placeOrder} from '../../../store/cart/middleware';\nimport { validName, validTelephone } from '../../../utils/constants';\nimport { layoutFormCheckout } from './utils';\n    \nexport const FormCheckoutComponent = (props) => {\n  const {\n    cities,\n    branches,\n    customer,\n    getBranches,\n    shippingCost,\n    placeOrder,\n    products,\n    getShippingCost\n  } = props\n\n  const { Option } = Select;\n  const history = useHistory()\n    \n  const formLayout = layoutFormCheckout;\n          \n  const fields = useMemo(() => ([{\n    name: 'email',\n    value: customer.email || null\n  },\n  {\n    name: 'firstName',\n    value: customer.firstName || null\n  },\n  {\n    name: 'lastName',\n    value: customer.lastName || null\n  },\n  {\n    name: 'phoneNumber',\n    value: customer.telephone || '+380'\n  },\n  {\n    name: 'country',\n    value: 'Ukraine'\n  },\n  ]), [customer])\n  \n  const recipientCityRef = useRef();\n  const countryRef = useRef();\n  const branchSelect = useRef();\n  const [valuePaymentInfo] = useState(\n    'Payment at the time of receipt of the goods'\n  );\n  \n  const [form] = Form.useForm();\n    \n  const handleCityChange = (cityRef) => {\n    form.setFieldsValue({recipientBranch: null})\n    getBranches(cityRef);\n  }\n  \n  const onFinish = (values) => {\n    placeOrder(products, values, customer, shippingCost, valuePaymentInfo)\n    history.push('/order')\n  };\n      \n  return (\n    <Form\n      {...formLayout}\n      name=\"checkout-form\"\n      fields={fields}\n      form={form}\n      onFinish={onFinish}\n    >\n      <StyledShippingTitle>\n        Customer Details:\n      </StyledShippingTitle>\n  \n      <Form.Item\n        label=\"Email\"\n        name=\"email\"\n        rules={[\n          {\n            required: true,\n            message: 'Please input your active email.',\n          },\n          {\n            type: 'email',\n            message: 'Entered data is not an email.',\n          },\n        ]}\n      >\n        <Input\n          placeholder=\"test@testmail.com\"\n        />\n      </Form.Item>\n        \n      <Form.Item\n        label=\"First name\"\n        name=\"firstName\"\n        rules={[\n          {\n            required: true,\n            message: 'Please input your name.',\n          },\n          {\n            type: 'string',\n            min: 2,\n            max: 25,\n            message: 'FirstName must be between 2 and 25 letters',\n          },\n          {\n            pattern: validName,\n            message: 'First name cannot contain characters, space or numbers'\n          },\n        ]}\n      >\n        <Input placeholder=\"First name\" />\n      </Form.Item>\n  \n      <Form.Item\n        label=\"Last name\"\n        name=\"lastName\"\n        rules={[\n          {\n            required: true,\n            message: 'Please input your Last name.',\n          },\n          {\n            type: 'string',\n            min: 2,\n            max: 25,\n            message: 'LastName must be between 2 and 25 letters',\n          },\n          {\n            pattern: validName,\n            message: 'Last name cannot contain characters, space or numbers'\n          },\n        ]}\n      >\n        <Input placeholder=\"Last name\" />\n      </Form.Item>\n  \n      <Form.Item\n        label=\"Phone number\"\n        name=\"phoneNumber\"\n        rules={[\n          {\n            required: true,\n            message: 'Please input your phone number +380 XX XXX XXXX',\n            min: 13,\n            max: 13,\n          },\n          {\n            pattern: validTelephone,\n            message: 'Phone number must start with \"+380\", allowed characters is 0-9'\n          }\n        ]}\n      >\n        <Input placeholder=\"Mobile Number +380 XX XXX XXXX\" />\n      </Form.Item>\n  \n      <StyledShippingTitle>\n        Payment Details:\n      </StyledShippingTitle>\n  \n      <Radio.Group\n        name=\"paymentInfo\"\n        value={valuePaymentInfo}\n        style={{marginBottom: '20px'}}\n      >\n        <StyledRadio value=\"Payment at the time of receipt of the goods\">\n          Payment at the time of receipt of the goods\n        </StyledRadio>\n      </Radio.Group>\n        \n      <StyledShippingTitle>\n        Shipping Details:\n      </StyledShippingTitle>\n  \n      <Form.Item\n        label=\"Country\"\n        name=\"country\"\n        rules={[{ required: true, message: 'Country is required' }]}\n      >\n        <Input disabled ref={countryRef} />\n      </Form.Item>\n  \n      <Form.Item\n        label=\"City\"\n        name=\"recipientCity\"\n        title=\"City choice\"\n        rules={[\n          { required: true, message: 'Recipient city is required' },\n            \n        ]}\n      >\n        <Select\n          placeholder=\"Select the city of recipient\"\n          onChange={handleCityChange}\n          ref={recipientCityRef}\n        >\n          {cities.map((item) => (\n            <Option value={item.Ref} key={item.Ref}>\n              {item.CityName}\n            </Option>\n          ))}\n        </Select>\n      </Form.Item>\n  \n      <Form.Item\n        label=\"№ branch\"\n        name=\"recipientBranch\"\n        rules={[\n          { required: true, message: 'Branch is required' },\n        ]}\n      >\n        <Select\n          placeholder=\"Select the branch of Nova Poshta of the recipient\"\n          onChange={() => getShippingCost(recipientCityRef)}\n          ref={branchSelect}\n        >\n          {branches.map((item) => (\n            <Option value={item.branchName} key={item.branchRef}>\n              {item.branchName}\n            </Option>\n          ))}\n        </Select>\n      </Form.Item>\n        \n      <StyledButton shape=\"round\" htmlType=\"submit\">\n        Place Order\n      </StyledButton>\n    </Form>\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  cities: selectCities(state),\n  branches: selectBranches(state),\n  customer: selectCustomer(state),\n  shippingCost: selectShippingCost(state),\n  products: selectProducts(state),\n})\n\nconst FormCheckout = connect(\n  mapStateToProps,\n  {\n    getBranches,\n    getShippingCost,\n    placeOrder\n  }\n)(FormCheckoutComponent)\n\nFormCheckoutComponent.propTypes = {\n  cities: PropTypes.arrayOf(\n    PropTypes.shape({\n      CityName: PropTypes.string.isRequired,\n      Ref: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  branches: PropTypes.arrayOf(PropTypes.shape({\n    branchName: PropTypes.string.isRequired,\n    branchRef: PropTypes.string.isRequired,\n  })).isRequired,\n  shippingCost: PropTypes.number.isRequired,\n  getBranches: PropTypes.func.isRequired,\n  getShippingCost: PropTypes.func.isRequired,\n  placeOrder: PropTypes.func.isRequired,\n  customer: PropTypes.shape({\n    telephone: PropTypes.string,\n    lastName: PropTypes.string,\n    firstName: PropTypes.string,\n    email: PropTypes.string,\n  }).isRequired,\n  products: PropTypes.arrayOf(PropTypes.shape({\n    imageUrls: PropTypes.arrayOf(PropTypes.string),\n    name: PropTypes.string,\n    currentPrice: PropTypes.number,\n    _id: PropTypes.string,\n  })).isRequired,\n}\n\nexport default FormCheckout;\n"]},"metadata":{},"sourceType":"module"}