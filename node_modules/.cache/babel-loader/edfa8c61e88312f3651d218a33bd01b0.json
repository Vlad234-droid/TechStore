{"ast":null,"code":"var _jsxFileName = \"/Users/vladikbaryshpolets/Desktop/Final_project_Online-store/src/components/DashBoard/Subscribed/Subscribe.jsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable import/no-cycle */\n\n/* eslint-disable react/prop-types */\n\n/* eslint-disable no-unused-vars */\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\nimport createNewSubscribe, { getSubscriber } from '../../../store/createSubscribe/middleware';\nimport { BlockInfo, TextInfo } from '../StyledDashBoard';\nimport SubscribedUser from './SubscribedUser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Subscribe = connect(null, {\n  createNewSubscribe\n})(_s(({\n  email,\n  createNewSubscribe\n}) => {\n  _s();\n\n  const [isSubscribed, setIsSubscribed] = useState(false); // email false\n\n  useEffect(() => {\n    const getSubscriberInfo = async () => {\n      if (email) {\n        const checkSubscription = await getSubscriber(email);\n\n        if (checkSubscription.status === 200) {\n          setIsSubscribed(() => true);\n        }\n      }\n    };\n\n    getSubscriberInfo();\n  }, [email]);\n\n  const addSubscriber = async (email, letterSubject, letterHtml) => {\n    const result = await createNewSubscribe({\n      email,\n      letterSubject,\n      letterHtml\n    });\n    if (!result && result.status !== 200) return;\n    setIsSubscribed(() => true);\n  };\n\n  const NotSubscribed = \"You don't subscribe to our newsletter\";\n  return /*#__PURE__*/_jsxDEV(BlockInfo, {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Newsletters\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(TextInfo, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: isSubscribed ? /*#__PURE__*/_jsxDEV(SubscribedUser, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(NotSubscribedUser, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 50\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => addSubscriber(email, letterSubject, letterHtml),\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}, \"jwzY2fryZMdGFxBHusGG+zxQIDg=\"));\nexport default Subscribe;","map":{"version":3,"sources":["/Users/vladikbaryshpolets/Desktop/Final_project_Online-store/src/components/DashBoard/Subscribed/Subscribe.jsx"],"names":["React","useEffect","useState","styled","connect","createNewSubscribe","getSubscriber","BlockInfo","TextInfo","SubscribedUser","Subscribe","email","isSubscribed","setIsSubscribed","getSubscriberInfo","checkSubscription","status","addSubscriber","letterSubject","letterHtml","result","NotSubscribed"],"mappings":";;;AAAA;;AACA;;AACA;AACA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,kBAAP,IAA6BC,aAA7B,QAAkD,2CAAlD;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,oBAApC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AAEA,MAAMC,SAAS,GAAGN,OAAO,CAAC,IAAD,EAAO;AAACC,EAAAA;AAAD,CAAP,CAAP,IAAoC,CAAC;AAACM,EAAAA,KAAD;AAAQN,EAAAA;AAAR,CAAD,KAAiC;AAAA;;AACrF,QAAM,CAACO,YAAD,EAAeC,eAAf,IAAkCX,QAAQ,CAAC,KAAD,CAAhD,CADqF,CAC7B;;AAExDD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,iBAAiB,GAAG,YAAY;AACpC,UAAIH,KAAJ,EAAW;AACT,cAAMI,iBAAiB,GAAG,MAAMT,aAAa,CAACK,KAAD,CAA7C;;AACA,YAAII,iBAAiB,CAACC,MAAlB,KAA6B,GAAjC,EAAsC;AACpCH,UAAAA,eAAe,CAAC,MAAM,IAAP,CAAf;AACD;AACF;AACF,KAPD;;AAQAC,IAAAA,iBAAiB;AAClB,GAVQ,EAUN,CAACH,KAAD,CAVM,CAAT;;AAYA,QAAMM,aAAa,GAAG,OAAON,KAAP,EAAcO,aAAd,EAA6BC,UAA7B,KAA4C;AAChE,UAAMC,MAAM,GAAG,MAAMf,kBAAkB,CAAC;AAACM,MAAAA,KAAD;AAAQO,MAAAA,aAAR;AAAuBC,MAAAA;AAAvB,KAAD,CAAvC;AACA,QAAI,CAACC,MAAD,IAAWA,MAAM,CAACJ,MAAP,KAAkB,GAAjC,EAAsC;AACtCH,IAAAA,eAAe,CAAC,MAAM,IAAP,CAAf;AACD,GAJD;;AAMA,QAAMQ,aAAa,GAAG,uCAAtB;AAEA,sBACE,QAAC,SAAD;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,6BACE,QAAC,QAAD;AAAA,gCACE;AAAA,oBACGT,YAAY,gBAAG,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,kBAAH,gBAAwB,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AADvC;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,OAAO,EAAE,MAAMK,aAAa,CAACN,KAAD,EAAQO,aAAR,EAAuBC,UAAvB,CAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CArCiB,kCAAlB;AAsCA,eAAeT,SAAf","sourcesContent":["/* eslint-disable import/no-cycle */\n/* eslint-disable react/prop-types */\n/* eslint-disable no-unused-vars */\nimport React, {useEffect, useState} from 'react';\nimport styled from 'styled-components'\nimport { connect } from 'react-redux';\nimport createNewSubscribe, { getSubscriber } from '../../../store/createSubscribe/middleware';\nimport { BlockInfo, TextInfo } from '../StyledDashBoard';\nimport SubscribedUser from './SubscribedUser';\n\nconst Subscribe = connect(null, {createNewSubscribe})(({email, createNewSubscribe}) => {\n  const [isSubscribed, setIsSubscribed] = useState(false) // email false\n\n  useEffect(() => {\n    const getSubscriberInfo = async () => {\n      if (email) {\n        const checkSubscription = await getSubscriber(email);\n        if (checkSubscription.status === 200) {\n          setIsSubscribed(() => true)\n        }\n      }\n    }\n    getSubscriberInfo()\n  }, [email])\n\n  const addSubscriber = async (email, letterSubject, letterHtml) => {\n    const result = await createNewSubscribe({email, letterSubject, letterHtml})\n    if (!result && result.status !== 200) return\n    setIsSubscribed(() => true)\n  }\n\n  const NotSubscribed = \"You don't subscribe to our newsletter\";\n\n  return (\n    <BlockInfo>\n      <h4>Newsletters</h4>\n      <div>\n        <TextInfo>\n          <p>\n            {isSubscribed ? <SubscribedUser /> : <NotSubscribedUser />}\n          </p>\n          <button type=\"button\" onClick={() => addSubscriber(email, letterSubject, letterHtml)}>Submit</button>\n        </TextInfo>\n      </div>\n    </BlockInfo>\n    \n  );\n})\nexport default Subscribe;"]},"metadata":{},"sourceType":"module"}