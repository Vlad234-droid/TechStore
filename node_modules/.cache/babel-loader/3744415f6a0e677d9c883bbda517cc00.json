{"ast":null,"code":"var _jsxFileName = \"/Users/vladikbaryshpolets/Desktop/Final_project_Online-store/src/components/ProductPage/ProductRate/ProductRate.jsx\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { Rate } from 'antd';\nimport { connect } from 'react-redux';\nimport { RateBox, ReviewsCount } from './StylesProductRate';\nimport { getOneProduct, updateOneProduct } from '../../../store/products/middleware';\nimport rateCalculator from '../../../utils/rateCalculator';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProductRate = connect(null, {\n  updateOneProduct\n})(_s(({\n  rating,\n  reviews,\n  productID,\n  itemNo,\n  updateOneProduct\n}) => {\n  _s();\n\n  const [rate, setRate] = useState(rating);\n  const [reviewsCount, setReviewsCount] = useState(reviews);\n\n  const handleChange = async value => {\n    if (value === 0) return;\n    setRate(value);\n    const response = await getOneProduct(itemNo);\n    if (response.status !== 200) return;\n    const product = response.data;\n    const reviewsArr = product.reviews;\n    const updatedProduct = { ...product,\n      reviews: [...reviewsArr, value]\n    };\n    const result = await updateOneProduct(productID, updatedProduct);\n    if (result.status !== 200) return;\n    const newReviewsArr = result.data.reviews;\n    const {\n      reviews\n    } = rateCalculator(newReviewsArr);\n    setReviewsCount(reviews);\n  };\n\n  const desc = ['terrible', 'bad', 'normal', 'good', 'wonderful'];\n  return /*#__PURE__*/_jsxDEV(RateBox, {\n    children: [/*#__PURE__*/_jsxDEV(ReviewsCount, {\n      children: [\"Reviews (\", reviewsCount, \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [/*#__PURE__*/_jsxDEV(Rate, {\n        tooltips: desc,\n        onChange: handleChange,\n        value: rate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), rate ? /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"ant-rate-text\",\n        children: desc[rate - 1]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this) : '']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}, \"Dn0Nw2oBlUucTP6P+S+cdRvJGGo=\"));\nProductRate.propTypes = {\n  rating: PropTypes.number.isRequired,\n  reviews: PropTypes.number.isRequired,\n  productID: PropTypes.string.isRequired,\n  itemNo: PropTypes.string.isRequired,\n  updateOneProduct: PropTypes.func\n};\nexport default ProductRate;","map":{"version":3,"sources":["/Users/vladikbaryshpolets/Desktop/Final_project_Online-store/src/components/ProductPage/ProductRate/ProductRate.jsx"],"names":["PropTypes","React","useState","Rate","connect","RateBox","ReviewsCount","getOneProduct","updateOneProduct","rateCalculator","ProductRate","rating","reviews","productID","itemNo","rate","setRate","reviewsCount","setReviewsCount","handleChange","value","response","status","product","data","reviewsArr","updatedProduct","result","newReviewsArr","desc","propTypes","number","isRequired","string","func"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types'\nimport React, { useState } from 'react'\nimport { Rate } from 'antd'\nimport { connect } from 'react-redux'\nimport { RateBox, ReviewsCount } from './StylesProductRate'\nimport { getOneProduct, updateOneProduct } from '../../../store/products/middleware'\nimport rateCalculator from '../../../utils/rateCalculator'\n\nconst ProductRate = connect(null, { updateOneProduct })(({\n  rating,\n  reviews,\n  productID,\n  itemNo,\n  updateOneProduct\n}) => {\n  const [rate, setRate] = useState(rating)\n  const [reviewsCount, setReviewsCount] = useState(reviews)\n  \n  const handleChange = async (value) => {\n    if (value === 0) return\n    setRate(value)\n    const response = await getOneProduct(itemNo)\n    if (response.status !== 200) return\n    \n    const product = response.data\n    const reviewsArr = product.reviews\n    \n    const updatedProduct = {\n      ...product,\n      reviews: [...reviewsArr, value]\n    }\n    const result = await updateOneProduct(productID, updatedProduct)\n    if (result.status !== 200) return\n    \n    const newReviewsArr = result.data.reviews\n    const { reviews } = rateCalculator(newReviewsArr)\n    setReviewsCount(reviews)\n  }\n  const desc = ['terrible', 'bad', 'normal', 'good', 'wonderful']\n\n  return (\n    <RateBox>\n      <ReviewsCount>\n        Reviews (\n        {reviewsCount}\n        )\n      </ReviewsCount>\n      <span>\n        <Rate tooltips={desc} onChange={handleChange} value={rate} />\n        {rate ? <span className=\"ant-rate-text\">{desc[rate - 1]}</span> : ''}\n      </span>\n    </RateBox>\n  )\n})\n\nProductRate.propTypes = {\n  rating: PropTypes.number.isRequired,\n  reviews: PropTypes.number.isRequired,\n  productID: PropTypes.string.isRequired,\n  itemNo: PropTypes.string.isRequired,\n  updateOneProduct: PropTypes.func\n}\n\nexport default ProductRate"]},"metadata":{},"sourceType":"module"}