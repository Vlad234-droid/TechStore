{"ast":null,"code":"var _jsxFileName = \"/Users/vladikbaryshpolets/Desktop/Final_project_Online-store/src/components/DashBoard/Subscribed/Subscribe.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { getSubscriber } from '../../../store/subscriptions/middleware';\nimport { BlockInfo, TextInfo } from '../StyledDashBoard';\nimport SubscribedUser from './SubscribedUser';\nimport NotSubscribedUser from './NotSubscribedUser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Subscribe = ({\n  email\n}) => {\n  _s();\n\n  const [isSubscribed, setIsSubscribed] = useState(false);\n  useEffect(() => {\n    const cleanUpFlag = false;\n\n    const getSubscriberInfo = async () => {\n      if (typeof email === 'string') {\n        const {\n          status\n        } = await getSubscriber(email);\n\n        if (!cleanUpFlag) {\n          if (status === 200) {\n            setIsSubscribed(() => true);\n          }\n        }\n      } else {\n        setIsSubscribed(() => false);\n      }\n    };\n\n    getSubscriberInfo();\n  }, [email, isSubscribed, setIsSubscribed]);\n  return /*#__PURE__*/_jsxDEV(BlockInfo, {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Newsletters\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(TextInfo, {\n        children: isSubscribed ? /*#__PURE__*/_jsxDEV(SubscribedUser, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 27\n        }, this) : /*#__PURE__*/_jsxDEV(NotSubscribedUser, {\n          email: email,\n          setIsSubscribed: setIsSubscribed\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Subscribe, \"jwzY2fryZMdGFxBHusGG+zxQIDg=\");\n\n_c = Subscribe;\nSubscribe.propTypes = {\n  email: PropTypes.string\n};\nSubscribe.defaultProps = {\n  email: ''\n};\nexport default Subscribe;\n\nvar _c;\n\n$RefreshReg$(_c, \"Subscribe\");","map":{"version":3,"sources":["/Users/vladikbaryshpolets/Desktop/Final_project_Online-store/src/components/DashBoard/Subscribed/Subscribe.jsx"],"names":["React","useEffect","useState","PropTypes","getSubscriber","BlockInfo","TextInfo","SubscribedUser","NotSubscribedUser","Subscribe","email","isSubscribed","setIsSubscribed","cleanUpFlag","getSubscriberInfo","status","propTypes","string","defaultProps"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,aAAT,QAA8B,yCAA9B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,oBAApC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAAA;;AAC/B,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAAC,KAAD,CAAhD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMY,WAAW,GAAG,KAApB;;AAEA,UAAMC,iBAAiB,GAAG,YAAY;AACpC,UAAI,OAAOJ,KAAP,KAAiB,QAArB,EAA+B;AAC7B,cAAM;AAAEK,UAAAA;AAAF,YAAa,MAAMX,aAAa,CAACM,KAAD,CAAtC;;AACA,YAAI,CAACG,WAAL,EAAkB;AAChB,cAAIE,MAAM,KAAK,GAAf,EAAoB;AAClBH,YAAAA,eAAe,CAAC,MAAM,IAAP,CAAf;AACD;AACF;AACF,OAPD,MAOO;AACLA,QAAAA,eAAe,CAAC,MAAM,KAAP,CAAf;AACD;AACF,KAXD;;AAYAE,IAAAA,iBAAiB;AAClB,GAhBQ,EAgBN,CAACJ,KAAD,EAAQC,YAAR,EAAsBC,eAAtB,CAhBM,CAAT;AAkBA,sBACE,QAAC,SAAD;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,6BACE,QAAC,QAAD;AAAA,kBACGD,YAAY,gBAAG,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,gBAAH,gBAET,QAAC,iBAAD;AACE,UAAA,KAAK,EAAED,KADT;AAEE,UAAA,eAAe,EAAEE;AAFnB;AAAA;AAAA;AAAA;AAAA;AAHN;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,CAtCD;;GAAMH,S;;KAAAA,S;AAuCNA,SAAS,CAACO,SAAV,GAAsB;AACpBN,EAAAA,KAAK,EAAEP,SAAS,CAACc;AADG,CAAtB;AAGAR,SAAS,CAACS,YAAV,GAAyB;AACvBR,EAAAA,KAAK,EAAE;AADgB,CAAzB;AAGA,eAAeD,SAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport PropTypes from 'prop-types';\nimport { getSubscriber } from '../../../store/subscriptions/middleware'\nimport { BlockInfo, TextInfo } from '../StyledDashBoard';\nimport SubscribedUser from './SubscribedUser';\nimport NotSubscribedUser from './NotSubscribedUser';\n\nconst Subscribe = ({ email }) => {\n  const [isSubscribed, setIsSubscribed] = useState(false)\n\n  useEffect(() => {\n    const cleanUpFlag = false;\n\n    const getSubscriberInfo = async () => {\n      if (typeof email === 'string') {\n        const { status } = await getSubscriber(email);\n        if (!cleanUpFlag) {\n          if (status === 200) {\n            setIsSubscribed(() => true)\n          }\n        }\n      } else {\n        setIsSubscribed(() => false)\n      }\n    }\n    getSubscriberInfo()\n  }, [email, isSubscribed, setIsSubscribed])\n\n  return (\n    <BlockInfo>\n      <h4>Newsletters</h4>\n      <div>\n        <TextInfo>\n          {isSubscribed ? <SubscribedUser />\n            : (\n              <NotSubscribedUser\n                email={email}\n                setIsSubscribed={setIsSubscribed}\n              />\n            )}\n        </TextInfo>\n      </div>\n    </BlockInfo>\n    \n  );\n}\nSubscribe.propTypes = {\n  email: PropTypes.string\n}\nSubscribe.defaultProps = {\n  email: '',\n}\nexport default Subscribe;\n"]},"metadata":{},"sourceType":"module"}