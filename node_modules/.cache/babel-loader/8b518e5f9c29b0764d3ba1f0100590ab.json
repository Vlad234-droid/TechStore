{"ast":null,"code":"var _jsxFileName = \"/Users/vladikbaryshpolets/Desktop/Final_project_Online-store/src/components/DashBoard/FormPasswordChange/FormPasswordChange.jsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useEffect } from 'react';\nimport { Form, Input, Button } from 'antd';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { setHideModal } from '../../../store/dashBoardModal/middleware';\nimport { changePassword } from '../../../store/customer/middleware';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 8\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 16\n    }\n  }\n};\nconst tailFormItemLayout = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0\n    },\n    sm: {\n      span: 16,\n      offset: 8\n    }\n  }\n};\n\nconst mapStateToProps = state => ({\n  show: state.dashBoardModal.show\n});\n\nconst PasswordChange = connect(mapStateToProps, {\n  setHideModal\n})(_s(({\n  setHideModal,\n  show\n}) => {\n  _s();\n\n  const [form] = Form.useForm();\n  useEffect(() => {\n    if (!show) {\n      form.resetFields();\n    }\n  }, [form, show]);\n\n  const onFinish = ({\n    middlePassword,\n    ...rest\n  }) => {\n    changePassword(rest);\n    form.resetFields();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, { ...formItemLayout,\n    form: form,\n    name: \"register\",\n    onFinish: onFinish,\n    scrollToFirstError: true,\n    children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n      name: \"password\",\n      label: \"Old Password\",\n      rules: [{\n        required: true,\n        message: 'Please input your old password!'\n      }, {\n        message: 'Password length must be at least 8 symbols',\n        min: 8\n      }],\n      hasFeedback: true,\n      children: /*#__PURE__*/_jsxDEV(Input.Password, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      name: \"middlePassword\",\n      label: \"Password\",\n      rules: [{\n        required: true,\n        message: 'Please input your password!'\n      }, {\n        message: 'Password length must be at least 8 symbols',\n        min: 8\n      }, {\n        type: 'string',\n        pattern: /^[a-z0-9]+$/i,\n        message: 'Enter please only letterts and numbers'\n      }],\n      hasFeedback: true,\n      children: /*#__PURE__*/_jsxDEV(Input.Password, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      name: \"newPassword\",\n      label: \"Confirm Password\",\n      dependencies: ['password'],\n      hasFeedback: true,\n      rules: [{\n        required: true,\n        message: 'Please confirm your password!'\n      }, {\n        message: 'Password length must be at least 8 symbols',\n        min: 8\n      }, {\n        type: 'string',\n        pattern: new RegExp( // eslint-disable-next-line no-useless-escape\n        /^[a-zA-ZА-Яа-я]+$/),\n        message: 'Enter please only letterts and numbers'\n      }, ({\n        getFieldValue\n      }) => ({\n        validator(_, value) {\n          if (!value || getFieldValue('middlePassword') === value) {\n            return Promise.resolve();\n          }\n\n          return Promise.reject(new Error('The two passwords that you entered do not match!'));\n        }\n\n      })],\n      children: /*#__PURE__*/_jsxDEV(Input.Password, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, { ...tailFormItemLayout,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        onClick: setHideModal,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}, \"hm6PaQ/QYB/X6ENq1nmkdh1TV0k=\", false, function () {\n  return [Form.useForm];\n}));\nPasswordChange.propTypes = {\n  setHideModal: PropTypes.func\n};\nexport default PasswordChange;","map":{"version":3,"sources":["/Users/vladikbaryshpolets/Desktop/Final_project_Online-store/src/components/DashBoard/FormPasswordChange/FormPasswordChange.jsx"],"names":["React","useEffect","Form","Input","Button","connect","PropTypes","setHideModal","changePassword","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","mapStateToProps","state","show","dashBoardModal","PasswordChange","form","useForm","resetFields","onFinish","middlePassword","rest","required","message","min","type","pattern","RegExp","getFieldValue","validator","_","value","Promise","resolve","reject","Error","propTypes","func"],"mappings":"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","sourcesContent":["/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useEffect } from 'react';\nimport {\n  Form,\n  Input,\n  Button,\n} from 'antd';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { setHideModal } from '../../../store/dashBoardModal/middleware';\nimport { changePassword } from '../../../store/customer/middleware';\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 8 },\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 16 },\n  },\n};\nconst tailFormItemLayout = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0,\n    },\n    sm: {\n      span: 16,\n      offset: 8,\n    },\n  },\n};\nconst mapStateToProps = (state) => ({\n  show: state.dashBoardModal.show\n})\n\nconst PasswordChange = connect(mapStateToProps, { setHideModal })(({ setHideModal, show }) => {\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    if (!show) {\n      form.resetFields()\n    }\n  }, [form, show])\n\n  const onFinish = ({middlePassword, ...rest}) => {\n    changePassword(rest);\n    form.resetFields();\n  };\n  \n  return (\n    <Form\n      {...formItemLayout}\n      form={form}\n      name=\"register\"\n      onFinish={onFinish}\n      scrollToFirstError\n    >\n      <Form.Item\n        name=\"password\"\n        label=\"Old Password\"\n        rules={[\n          {\n            required: true,\n            message: 'Please input your old password!',\n          },\n          {\n            message: 'Password length must be at least 8 symbols',\n            min: 8\n          },\n        ]}\n        hasFeedback\n      >\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item\n        name=\"middlePassword\"\n        label=\"Password\"\n        rules={[\n          {\n            required: true,\n            message: 'Please input your password!',\n          },\n          {\n            message: 'Password length must be at least 8 symbols',\n            min: 8\n          },\n          {\n            type: 'string',\n            pattern: /^[a-z0-9]+$/i,\n            message: 'Enter please only letterts and numbers'\n          }\n        ]}\n        hasFeedback\n      >\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item\n        name=\"newPassword\"\n        label=\"Confirm Password\"\n        dependencies={['password']}\n        hasFeedback\n        rules={[\n          {\n            required: true,\n            message: 'Please confirm your password!',\n          },\n          {\n            message: 'Password length must be at least 8 symbols',\n            min: 8\n          },\n          {\n            type: 'string',\n            pattern: new RegExp(\n            // eslint-disable-next-line no-useless-escape\n              /^[a-zA-ZА-Яа-я]+$/\n            ),\n            message: 'Enter please only letterts and numbers'\n          },\n          ({ getFieldValue }) => ({\n            validator(_, value) {\n              if (!value || getFieldValue('middlePassword') === value) {\n                return Promise.resolve();\n              }\n              return Promise.reject(new Error('The two passwords that you entered do not match!'));\n            },\n          }),\n        ]}\n      >\n        <Input.Password />\n      </Form.Item>\n    \n      <Form.Item {...tailFormItemLayout}>\n        <Button type=\"primary\" htmlType=\"submit\" onClick={setHideModal}>\n          Submit\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n})\n\nPasswordChange.propTypes = {\n  setHideModal: PropTypes.func\n}\nexport default PasswordChange;\n"]},"metadata":{},"sourceType":"module"}