{"ast":null,"code":"var _jsxFileName = \"/Users/vladikbaryshpolets/Desktop/Final_project_Online-store/src/components/Checkout/FormCheckout/FormCheckout.jsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable no-underscore-dangle */\n\n/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Input, Radio, Select } from 'antd';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom/';\nimport { selectBranches, selectCities, selectCustomer, selectShippingCost } from '../../../store/cart/reducer';\nimport { StyledRadio, StyledShippingTitle } from '../StyledCheckout';\nimport StyledButton from '../../common/Buttons/StyledButton';\nimport { getCity, getShippingCost, PlaceOrder } from '../../../store/cart/middleware';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst mapStateToProps = state => ({\n  cities: selectCities(state),\n  branches: selectBranches(state),\n  customer: selectCustomer(state),\n  shippingCost: selectShippingCost(state)\n});\n\nconst FormCheckout = connect(mapStateToProps, {\n  getCity,\n  getShippingCost,\n  PlaceOrder\n})(_s(({\n  cities,\n  branches,\n  customer,\n  getCity,\n  getShippingCost,\n  shippingCost,\n  PlaceOrder\n}) => {\n  _s();\n\n  const recipientCityRef = useRef();\n  const countryRef = useRef();\n  const branchRef = useRef();\n  const [valuePaymentInfo, setValuePaymentInfo] = useState('Cash');\n\n  const onChange = e => {\n    setValuePaymentInfo(e.target.value);\n  };\n\n  const history = useHistory();\n\n  const onFinish = values => {\n    PlaceOrder(values, customer, shippingCost, valuePaymentInfo);\n    history.push('/order');\n  };\n\n  const formLayout = {\n    labelCol: {\n      xs: {\n        span: 24\n      },\n      sm: {\n        span: 6\n      },\n      md: {\n        span: 8\n      },\n      lg: {\n        span: 7\n      }\n    },\n    wrapperCol: {\n      xs: {\n        span: 24\n      },\n      sm: {\n        span: 16\n      },\n      md: {\n        span: 16\n      },\n      lg: {\n        span: 12\n      }\n    }\n  };\n  const {\n    Option\n  } = Select;\n  const fields = [{\n    name: 'email',\n    value: customer.email\n  }, {\n    name: 'firstName',\n    value: customer.firstName\n  }, {\n    name: 'lastName',\n    value: customer.lastName\n  }, {\n    name: 'phoneNumber',\n    value: customer.telephone\n  }, {\n    name: 'country',\n    value: 'Ukraine'\n  }];\n  return /*#__PURE__*/_jsxDEV(Form, { ...formLayout,\n    name: \"checkout-form\",\n    fields: fields,\n    initialValues: {\n      remember: true\n    },\n    onFinish: onFinish,\n    children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n      label: \"Email\",\n      name: \"email\",\n      rules: [{\n        required: true,\n        message: 'Please input your email.'\n      }, {\n        type: 'email',\n        message: 'Entered data is not an email.'\n      }],\n      children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      label: \"First name\",\n      name: \"firstName\",\n      id: customer.firstName,\n      options: customer.firstName,\n      rules: [{\n        required: true,\n        message: 'Please input your name.'\n      }],\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        placeholder: \"First name\",\n        value: customer.firstName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      label: \"Last name\",\n      name: \"lastName\",\n      rules: [{\n        required: true,\n        message: 'Please input your Last name.'\n      }],\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        placeholder: \"Last name\",\n        value: customer.lastName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      label: \"Phone number\",\n      name: \"phoneNumber\",\n      rules: [{\n        required: true,\n        message: 'Please input your phone number'\n      }],\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        placeholder: \"Mobile Number (+380 XX XXX XXXX)\",\n        value: customer.telephone\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StyledShippingTitle, {\n      children: \"Shipping Details:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      label: \"Country\",\n      name: \"country\",\n      rules: [{\n        required: true,\n        message: 'Country is required'\n      }],\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        disabled: true,\n        ref: countryRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      label: \"City\",\n      name: \"recipientCity\",\n      rules: [{\n        required: true,\n        message: 'Recipient city is required'\n      }],\n      children: /*#__PURE__*/_jsxDEV(Select, {\n        placeholder: \"Select the city of recipient\",\n        onChange: getCity,\n        ref: recipientCityRef,\n        children: cities.map(item => /*#__PURE__*/_jsxDEV(Option, {\n          value: item.Ref,\n          children: item.CityName\n        }, item.Ref, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n      label: \"\\u2116 branch\",\n      name: \"recipientBranch\",\n      rules: [{\n        required: true,\n        message: 'Branch is required'\n      }],\n      children: /*#__PURE__*/_jsxDEV(Select, {\n        placeholder: \"Select the branch of Nova Poshta of the recipient\",\n        onChange: () => getShippingCost(recipientCityRef),\n        ref: branchRef,\n        children: branches.map(item => /*#__PURE__*/_jsxDEV(Option, {\n          value: item.branchRef,\n          children: item.branchName\n        }, item.branchRef, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StyledShippingTitle, {\n      children: \"Payment Details:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Radio.Group, {\n      name: \"paymentInfo\",\n      onChange: onChange,\n      value: valuePaymentInfo,\n      style: {\n        marginBottom: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(StyledRadio, {\n        value: \"Cash\",\n        children: \"Cash\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledRadio, {\n        value: \"Card\",\n        children: \"Card\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StyledButton, {\n      shape: \"round\",\n      htmlType: \"submit\",\n      children: \"Place Order\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}, \"sHEnh7pOTREuC7UA1JzjR55wnpk=\", false, function () {\n  return [useHistory];\n}));\nexport default FormCheckout;\nFormCheckout.propTypes = {\n  cities: PropTypes.string,\n  branches: PropTypes.string,\n  shippingCost: PropTypes.number,\n  getCity: PropTypes.func,\n  getShippingCost: PropTypes.func,\n  PlaceOrder: PropTypes.func,\n  customer: PropTypes.shape({\n    telephone: PropTypes.string,\n    lastName: PropTypes.string,\n    firstName: PropTypes.string,\n    email: PropTypes.string\n  })\n};","map":{"version":3,"sources":["/Users/vladikbaryshpolets/Desktop/Final_project_Online-store/src/components/Checkout/FormCheckout/FormCheckout.jsx"],"names":["React","useRef","useState","PropTypes","Form","Input","Radio","Select","connect","useHistory","selectBranches","selectCities","selectCustomer","selectShippingCost","StyledRadio","StyledShippingTitle","StyledButton","getCity","getShippingCost","PlaceOrder","mapStateToProps","state","cities","branches","customer","shippingCost","FormCheckout","recipientCityRef","countryRef","branchRef","valuePaymentInfo","setValuePaymentInfo","onChange","e","target","value","history","onFinish","values","push","formLayout","labelCol","xs","span","sm","md","lg","wrapperCol","Option","fields","name","email","firstName","lastName","telephone","remember","required","message","type","map","item","Ref","CityName","branchName","marginBottom","propTypes","string","number","func","shape"],"mappings":"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","sourcesContent":["/* eslint-disable no-underscore-dangle */\n/* eslint-disable react/jsx-props-no-spreading */\nimport React, {useRef, useState} from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Form, Input, Radio, Select\n} from 'antd';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom/';\nimport {\n  selectBranches,\n  selectCities,\n  selectCustomer,\n  selectShippingCost\n} from '../../../store/cart/reducer';\nimport {StyledRadio, StyledShippingTitle} from '../StyledCheckout';\nimport StyledButton from '../../common/Buttons/StyledButton';\nimport {\n  getCity, getShippingCost, PlaceOrder\n} from '../../../store/cart/middleware';\n\nconst mapStateToProps = (state) => ({\n  cities: selectCities(state),\n  branches: selectBranches(state),\n  customer: selectCustomer(state),\n  shippingCost: selectShippingCost(state),\n})\n\nconst FormCheckout = connect(mapStateToProps, {getCity, getShippingCost, PlaceOrder})(({\n  cities, branches, customer, getCity, getShippingCost, shippingCost, PlaceOrder\n}) => {\n  const recipientCityRef = useRef();\n  const countryRef = useRef();\n  const branchRef = useRef();\n\n  const [valuePaymentInfo, setValuePaymentInfo] = useState('Cash');\n\n  const onChange = (e) => {\n    setValuePaymentInfo(e.target.value);\n  };\n\n  const history = useHistory()\n\n  const onFinish = (values) => {\n    PlaceOrder(values, customer, shippingCost, valuePaymentInfo)\n    history.push('/order')\n  };\n\n  const formLayout = {\n    labelCol: {\n      xs: {\n        span: 24,\n      },\n      sm: {\n        span: 6,\n      },\n      md: {\n        span: 8,\n      },\n      lg: {\n        span: 7,\n      },\n    },\n    wrapperCol: {\n      xs: {\n        span: 24,\n      },\n      sm: {\n        span: 16,\n      },\n      md: {\n        span: 16,\n      },\n      lg: {\n        span: 12,\n      },\n    },\n  };\n        \n  const { Option } = Select;\n\n  const fields = [{\n    name: 'email',\n    value: customer.email\n  },\n  {\n    name: 'firstName',\n    value: customer.firstName\n  },\n  {\n    name: 'lastName',\n    value: customer.lastName\n  },\n  {\n    name: 'phoneNumber',\n    value: customer.telephone\n  },\n  {\n    name: 'country',\n    value: 'Ukraine'\n  },\n  ]\n\n  return (\n    <Form\n      {...formLayout}\n      name=\"checkout-form\"\n      fields={fields}\n      initialValues={{\n        remember: true,\n      }}\n      onFinish={onFinish}\n    >\n      <Form.Item\n        label=\"Email\"\n        name=\"email\"\n        rules={[\n          {\n            required: true,\n            message: 'Please input your email.',\n          },\n          {\n            type: 'email',\n            message: 'Entered data is not an email.',\n          },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n      \n      <Form.Item\n        label=\"First name\"\n        name=\"firstName\"\n        id={customer.firstName}\n        options={customer.firstName}\n        rules={[\n          {\n            required: true,\n            message: 'Please input your name.',\n          },\n        ]}\n      >\n        <Input placeholder=\"First name\" value={customer.firstName} />\n      </Form.Item>\n\n      <Form.Item\n        label=\"Last name\"\n        name=\"lastName\"\n        rules={[\n          {\n            required: true,\n            message: 'Please input your Last name.',\n          },\n        ]}\n      >\n        <Input placeholder=\"Last name\" value={customer.lastName} />\n      </Form.Item>\n\n      <Form.Item\n        label=\"Phone number\"\n        name=\"phoneNumber\"\n        rules={[\n          {\n            required: true,\n            message: 'Please input your phone number',\n          },\n        ]}\n      >\n        <Input placeholder=\"Mobile Number (+380 XX XXX XXXX)\" value={customer.telephone} />\n      </Form.Item>\n\n      <StyledShippingTitle>\n        Shipping Details:\n      </StyledShippingTitle>\n\n      <Form.Item\n        label=\"Country\"\n        name=\"country\"\n        rules={[{ required: true, message: 'Country is required' }]}\n      >\n        <Input disabled ref={countryRef} />\n      </Form.Item>\n\n      <Form.Item\n        label=\"City\"\n        name=\"recipientCity\"\n        rules={[{ required: true, message: 'Recipient city is required' }]}\n      >\n        <Select placeholder=\"Select the city of recipient\" onChange={getCity} ref={recipientCityRef}>\n          {cities.map((item) => (\n            <Option value={item.Ref} key={item.Ref}>\n              {item.CityName}\n            </Option>\n          ))}\n        </Select>\n      </Form.Item>\n\n      <Form.Item\n        label=\"№ branch\"\n        name=\"recipientBranch\"\n        rules={[{ required: true, message: 'Branch is required' }]}\n      >\n        <Select\n          placeholder=\"Select the branch of Nova Poshta of the recipient\"\n          onChange={() => getShippingCost(recipientCityRef)}\n          ref={branchRef}\n        >\n          {branches.map((item) => (\n            <Option value={item.branchRef} key={item.branchRef}>\n              {item.branchName}\n            </Option>\n          ))}\n        </Select>\n      </Form.Item>\n      <StyledShippingTitle>\n        Payment Details:\n      </StyledShippingTitle>\n\n      <Radio.Group name=\"paymentInfo\" onChange={onChange} value={valuePaymentInfo} style={{marginBottom: '20px'}}>\n        <StyledRadio value=\"Cash\">\n          Cash\n        </StyledRadio>\n        <StyledRadio value=\"Card\">\n          Card\n        </StyledRadio>\n      </Radio.Group>\n      <StyledButton shape=\"round\" htmlType=\"submit\">\n        Place Order\n      </StyledButton>\n    </Form>\n  )\n})\n\nexport default FormCheckout;\n\nFormCheckout.propTypes = {\n  cities: PropTypes.string,\n  branches: PropTypes.string,\n  shippingCost: PropTypes.number,\n  getCity: PropTypes.func,\n  getShippingCost: PropTypes.func,\n  PlaceOrder: PropTypes.func,\n  customer: PropTypes.shape({\n    telephone: PropTypes.string,\n    lastName: PropTypes.string,\n    firstName: PropTypes.string,\n    email: PropTypes.string,\n  }),\n}"]},"metadata":{},"sourceType":"module"}