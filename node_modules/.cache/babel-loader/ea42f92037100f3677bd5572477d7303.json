{"ast":null,"code":"var _jsxFileName = \"/Users/vladikbaryshpolets/Desktop/Final_project_Online-store/src/components/CartPage/NumberInput/NumericInput.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Input } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass NumericInput extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onChange = e => {\n      const {\n        value\n      } = e.target;\n      const {\n        onChange\n      } = this.props;\n      const reg = /^-?\\d*(\\.\\d*)?$/;\n\n      if (!Number.isNaN(value) && reg.test(value) || value === '' || value === '') {\n        onChange(value);\n      }\n    };\n\n    this.onBlur = () => {\n      const {\n        value,\n        onBlur,\n        onChange\n      } = this.props;\n      let valueTemp = value;\n\n      if (value.charAt(value.length - 1) === '.' || value === '-') {\n        valueTemp = value.slice(0, -1);\n      }\n\n      onChange(valueTemp.replace(/0*(\\d+)/, '$1'));\n\n      if (onBlur) {\n        onBlur();\n      }\n    };\n  }\n\n  render() {\n    const {\n      value\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(Input, {\n      value: value,\n      onChange: this.onChange,\n      onBlur: this.onBlur,\n      placeholder: \"Phone number\",\n      maxLength: 25\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default NumericInput;\nNumericInput.propTypes = {\n  value: PropTypes.number.isRequired,\n  onBlur: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["/Users/vladikbaryshpolets/Desktop/Final_project_Online-store/src/components/CartPage/NumberInput/NumericInput.jsx"],"names":["React","PropTypes","Input","NumericInput","Component","onChange","e","value","target","props","reg","Number","isNaN","test","onBlur","valueTemp","charAt","length","slice","replace","render","propTypes","number","isRequired","func"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,KAAT,QAAsB,MAAtB;;;AAEA,MAAMC,YAAN,SAA2BH,KAAK,CAACI,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SACzCC,QADyC,GAC7BC,CAAD,IAAO;AAChB,YAAM;AAAEC,QAAAA;AAAF,UAAYD,CAAC,CAACE,MAApB;AACA,YAAM;AAACH,QAAAA;AAAD,UAAa,KAAKI,KAAxB;AACA,YAAMC,GAAG,GAAG,iBAAZ;;AACA,UAAK,CAACC,MAAM,CAACC,KAAP,CAAaL,KAAb,CAAD,IAAwBG,GAAG,CAACG,IAAJ,CAASN,KAAT,CAAzB,IAA6CA,KAAK,KAAK,EAAvD,IAA6DA,KAAK,KAAK,EAA3E,EAA+E;AAC7EF,QAAAA,QAAQ,CAACE,KAAD,CAAR;AACD;AACF,KARwC;;AAAA,SAWzCO,MAXyC,GAWhC,MAAM;AACb,YAAM;AAAEP,QAAAA,KAAF;AAASO,QAAAA,MAAT;AAAiBT,QAAAA;AAAjB,UAA8B,KAAKI,KAAzC;AACA,UAAIM,SAAS,GAAGR,KAAhB;;AACA,UAAIA,KAAK,CAACS,MAAN,CAAaT,KAAK,CAACU,MAAN,GAAe,CAA5B,MAAmC,GAAnC,IAA0CV,KAAK,KAAK,GAAxD,EAA6D;AAC3DQ,QAAAA,SAAS,GAAGR,KAAK,CAACW,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAhB,CAAZ;AACD;;AACDb,MAAAA,QAAQ,CAACU,SAAS,CAACI,OAAV,CAAkB,SAAlB,EAA6B,IAA7B,CAAD,CAAR;;AACA,UAAIL,MAAJ,EAAY;AACVA,QAAAA,MAAM;AACP;AACF,KArBwC;AAAA;;AAuBzCM,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEb,MAAAA;AAAF,QAAY,KAAKE,KAAvB;AAEA,wBAEE,QAAC,KAAD;AACE,MAAA,KAAK,EAAEF,KADT;AAEE,MAAA,QAAQ,EAAE,KAAKF,QAFjB;AAGE,MAAA,MAAM,EAAE,KAAKS,MAHf;AAIE,MAAA,WAAW,EAAC,cAJd;AAKE,MAAA,SAAS,EAAE;AALb;AAAA;AAAA;AAAA;AAAA,YAFF;AAUD;;AApCwC;;AAuC3C,eAAeX,YAAf;AAEAA,YAAY,CAACkB,SAAb,GAAyB;AACvBd,EAAAA,KAAK,EAAEN,SAAS,CAACqB,MAAV,CAAiBC,UADD;AAEvBT,EAAAA,MAAM,EAAEb,SAAS,CAACuB,IAAV,CAAeD,UAFA;AAGvBlB,EAAAA,QAAQ,EAAEJ,SAAS,CAACuB,IAAV,CAAeD;AAHF,CAAzB","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Input } from 'antd';\n\nclass NumericInput extends React.Component {\n  onChange = (e) => {\n    const { value } = e.target;\n    const {onChange} = this.props;\n    const reg = /^-?\\d*(\\.\\d*)?$/;\n    if ((!Number.isNaN(value) && reg.test(value)) || value === '' || value === '') {\n      onChange(value);\n    }\n  };\n\n  // '.' at the end or only '-' in the input box.\n  onBlur = () => {\n    const { value, onBlur, onChange } = this.props;\n    let valueTemp = value;\n    if (value.charAt(value.length - 1) === '.' || value === '-') {\n      valueTemp = value.slice(0, -1);\n    }\n    onChange(valueTemp.replace(/0*(\\d+)/, '$1'));\n    if (onBlur) {\n      onBlur();\n    }\n  };\n\n  render() {\n    const { value } = this.props;\n    \n    return (\n      \n      <Input\n        value={value}\n        onChange={this.onChange}\n        onBlur={this.onBlur}\n        placeholder=\"Phone number\"\n        maxLength={25}\n      />\n    );\n  }\n}\n\nexport default NumericInput;\n\nNumericInput.propTypes = {\n  value: PropTypes.number.isRequired,\n  onBlur: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n\n}\n"]},"metadata":{},"sourceType":"module"}